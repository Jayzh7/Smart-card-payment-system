create table run_log
(runID NUMBER PRIMARY KEY,
 ModuleName VARCHAR2(35) NOT NULL,
 RunStartDate DATE NOT NULL,
 RunEndDate DATE,
 Outcome VARCHAR2(25),
 Comments VARCHAR2(255));
 
 create table FSS_DAILY_TRANSACTIONS
 (TRANSACTIONNR NUMBER,
  DOWNLOADDATE DATE,
  TERMINALID VARCHAR2(10),
  CARDID VARCHAR2(17),
  TRANSACTIONDATE DATE,
  CARDOLDVALUE NUMBER,
  TRANSACTIONAMOUNT NUMBER,
  CARDNEWVALUE NUMBER,
  TRANSACTIONSTATUS VARCHAR2(1),
  ERRORCODE VARCHAR2(25),
  LODGEREF VARCHAR2(18)
);

DROP TABLE FSS_DAILY_TRANSACTIONS;

TRUNCATE table FSS_DAILY_TRANSACTIONS;
TRUNCATE table FSS_DAILY_SETTLEMENT;

create table FSS_DAILY_SETTLEMENT
(SETTLEDATE DATE,
 MERCHANTID NUMBER,
 MERCHANTNAME VARCHAR(50),
 LODGEREF VARCHAR2(18),
 TOTALAMOUNT NUMBER
);

TRUNCATE TABLE  FSS_DAILY_SETTLEMENT;
DROP TABLE FSS_DAILY_SETTLEMENT;

CREATE SEQUENCE seq_lodge_ref
START WITH 1
INCREMENT BY 1;

select * from FSS_TRANSACTIONS where trunc(downloaddate) = trunc(sysdate);

CREATE OR REPLACE TRIGGER tri_settlement_insert
BEFORE
INSERT ON FSS_DAILY_SETTLEMENT
FOR EACH ROW
BEGIN
--select to_char(:old.SETTLEDATE, 'MMDDYYYY') -- || LPAD(seq_lodge_ref.nextval, 10, '0'))
--into :new.lodgeref from dual;
:new.lodgeref := to_char(:old.SETTLEDATE, 'MMDDYYYY') || LPAD(seq_lodge_ref.nextval, 10, '0');
END tri_settlement_insert;

drop trigger tri_settlement_insert;
    